{
    // A list of subprojects
    "subprojects": [],
    "test_frameworks": {
        "elixir": [
            "espec",
            "exunit"
        ],
        "go": [
            "ginkgo",
            "gotest",
        ],
        "javascript": [
            "jest",
            "mocha",
            "vitest"
        ],
        "python": [
            "pytest",
            "pyunit"
        ],
        "ruby": [
            "cucumber",
            "m",
            "minitest",
            "rails",
            "rspec",
            "test_bench"
        ],
        "rust": [
            "cargotest"
        ],
        "swift": [
            "xctest"
        ],
        "java": [
            "junit"
        ]
    },
    // Available log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
    "log_level": "WARNING",
    "show_status_messages": true,
    // auto save current file on test run
    "save_current_file_on_run": true,
    // auto save all files on test run
    "save_all_files_on_run": false,
    // scroll the view when the panel is overlaying the cursor
    "scroll_to_view_on_run": false,
    // when a test framework is not found show a quick panel with all available test frameworks
    "select_test_framework_when_not_found": false,
    // show the quick panel even if there is only one test framework available
    // otherwise use the first test framework from the list
    "always_show_test_framework_selection": true,
    //
    // ###########
    // # Runners #
    // ###########
    // Available runners: command, terminus, console (console is mostly for debugging)
    "runner": "command",
    // --- Command runner ---
    "runner.command.name": "exec",
    // "runner.command.panel_name": "output.exec",
    //
    // --- Terminus runner ---
    "runner.terminus.focus_on_run": false,
    // "runner.terminus.run_in_view": false,
    // "runner.terminus.pre_window_hooks": [],
    // "runner.terminus.post_window_hooks": [],
    // "runner.terminus.post_view_hooks": [],
    //
    // ###################
    // # Test Frameworks #
    // ###################
    // --- Elixir ---
    // "elixir.runner": "command", // a runner for all elixir test frameworks
    // "elixir.env": { "ENV1": "value" }, // will be merged with the ENV variable defined on the test framework level
    //
    // "elixir.espec.runner": "command", // a runner for the ESpec test framework
    "elixir.espec.executable": [
        "mix",
        "espec"
    ],
    // "elixir.espec.args": ["--do-smth"],
    // "elixir.espec.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    //
    // "elixir.exunit.runner": "command", // a runner for the ExUnit test framework
    // "elixir.exunit.executable": ["mix", "do", "smth"],
    // "elixir.exunit.args": ["--do-smth"],
    // "elixir.exunit.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    //
    // --- Go ---
    // to force a Go test framework use:
    // "go.test_framework": "gotest",
    //
    // "go.runner": "command", // a runner for all Go test frameworks
    // "go.env": { "ENV1": "value" }, // will be merged with the ENV variable defined on the test framework level
    //
    // "go.gotest.runner": "command", // a runner for the Gotest test framework
    "go.gotest.executable": [
        "go",
        "test"
    ], // for richgo use ["richgo", "test"]
    // "go.gotest.args": ["--do-smth"],
    // "go.gotest.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    //
    // "go.ginkgo.runner": "command", // a runner for the Ginko test framework
    "go.ginkgo.executable": [
        "ginkgo"
    ],
    // "go.ginkgo.args": ["--do-smth"],
    // "go.ginkgo.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    //
    // --- Java ---
    // "java.runner": "command", // a runner for all Java test frameworks
    // "java.env": { "ENV1": "value" }, // will be merged with the ENV variable defined on the test framework level
    //
    // "java.junit.runner": "command", // a runner for the JUnit test framework
    // "java.junit.executable": ["bin/my_wrapper", "test"],
    // "java.junit.args": ["--do-smth"],
    // "java.junit.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    //
    // --- JavaScript ---
    // to force a JavaScript test framework use:
    // "javascript.test_framework": "jest",
    //
    // "javascript.runner": "command", // a runner for all JavaScript test frameworks
    // "javascript.env": { "ENV1": "value" }, // will be merged with the ENV variable defined on the test framework level
    //
    // "javascript.jest.runner": "command", // a runner for the Jest test framework
    // "javascript.jest.executable": ["npm", "run", "test"],
    // "javascript.jest.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    "javascript.jest.args": [
        "--no-coverage"
    ],
    //
    // "javascript.mocha.runner": "command", // a runner for the Mocha test framework
    // "javascript.mocha.executable": ["npm", "run", "test"],
    // "javascript.mocha.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    // "javascript.mocha.args": ["--do-smth"],
    //
    // "javascript.vitest.runner": "command", // a runner for the Vitest test framework
    // "javascript.vitest.executable": ["npm", "run", "test"],
    // "javascript.vitest.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    // "javascript.vitest.args": ["--do-smth"],
    //
    // --- Python ---
    // to force a Python test framework use:
    // "python.test_framework": "pytest",
    //
    // "python.runner": "command", // a runner for all Python test frameworks
    // "python.env": { "ENV1": "value" }, // will be merged with the ENV variable defined on the test framework level
    //
    // "python.pytest.runner": "command", // a runner for the pytest test framework
    // "python.pytest.executable": ["my_pytest"],
    // "python.pytest.args": ["--do-smth"],
    // "python.pytest.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    //
    // "python.pyunit.runner": "unittesting", // a runner for the pyunit test framework (use unittesting for testing sublime packages)
    // "python.pyunit.executable": ["my_pyunit"],
    // "python.pyunit.args": ["--do-smth"],
    // "python.pyunit.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    //
    // --- Ruby ---
    "ruby.use_bundle": true,
    "ruby.use_binstubs": true,
    "ruby.use_spring_binstub": false,
    // "ruby.runner": "command", // a runner for all Ruby test frameworks
    // "ruby.env": { "ENV1": "value" }, // will be merged with the ENV variable defined on the test framework level
    //
    // "ruby.cucumber.use_bundle": true,
    // "ruby.cucumber.use_binstubs": true,
    // "ruby.cucumber.use_spring_binstub": false,
    // "ruby.cucumber.runner": "command", // a runner for the Cucumber test framework
    // "ruby.cucumber.executable": ["bin/my_cucumber"],
    // "ruby.cucumber.args": ["--do-smth"],
    // "ruby.cucumber.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    //
    // "ruby.m.use_bundle": true,
    // "ruby.m.use_binstubs": true,
    // "ruby.m.use_spring_binstub": false,
    // "ruby.m.runner": "command", // a runner for the M test framework
    // "ruby.m.executable": ["bin/my_m"],
    // "ruby.m.args": ["--do-smth"],
    // "ruby.m.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    //
    "ruby.minitest.test_folder": "test",
    "ruby.minitest.file_pattern": "*_test.rb",
    // "ruby.minitest.use_bundle": true,
    // "ruby.minitest.use_binstubs": true,
    // "ruby.minitest.use_spring_binstub": false,
    // "ruby.minitest.use_m": true, // use the M test framework instead of minitest
    // "ruby.minitest.runner": "command", // a runner for the minitest test framework
    // "ruby.minitest.executable": ["bin/tests"],
    // "ruby.minitest.args": ["--do-smth"],
    // "ruby.minitest.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    //
    // "ruby.rails.use_bundle": true,
    // "ruby.rails.use_binstubs": true,
    // "ruby.rails.use_spring_binstub": false,
    // "ruby.rails.runner": "command", // a runner for the Rails test framework
    // "ruby.rails.executable": ["bin/my_rails_test"],
    // "ruby.rails.args": ["--do-smth"],
    // "ruby.rails.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    //
    // "ruby.rspec.use_bundle": true,
    // "ruby.rspec.use_binstubs": true,
    // "ruby.rspec.use_spring_binstub": false,
    // "ruby.rspec.runner": "command", // a runner for the RSpec test framework
    // "ruby.rspec.executable": ["bin/my_rspec"],
    // "ruby.rspec.args": ["--do-smth"],
    // "ruby.rspec.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    //
    // "ruby.test_bench.use_bundle": true,
    // "ruby.test_bench.runner": "command", // a runner for the test bench test framework
    // "ruby.test_bench.executable": ["bin/my_test_bench"],
    // "ruby.test_bench.args": ["--do-smth"],
    // "ruby.test_bench.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    //
    // --- Rust ---
    // "rust.runner": "command", // a runner for all Rust test frameworks
    // "rust.env": { "ENV1": "value" }, // will be merged with the ENV variable defined on the test framework level
    //
    // "rust.cargotest.runner": "command", // a runner for the cargo test framework
    "rust.cargotest.executable": [
        "cargo",
        "test"
    ],
    // "rust.cargotest.args": ["--do-smth"],
    // "rust.cargotest.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
    //
    // --- Swift ---
    // "swift.runner": "command", // a runner for all Swift test frameworks
    // "swift.env": { "ENV1": "value" }, // will be merged with the ENV variable defined on the test framework level
    //
    // "swift.xctest.runner": "command", // a runner for the XCTest test framework
    "swift.xctest.executable": [
        "swift",
        "test"
    ],
    // "swift.xctest.args": ["--do-smth"],
    // "swift.xctest.env": { "ENV2": "value" }, // will be merged with the ENV variable defined on the language level
}
